@page
@model DrawAndGuessV3.Pages.GameModel
@{
    ViewData["Title"] = "Game";
}

<style>
    #draw-canvas {
        background-color: #ddd;
    }
</style>

<div>
    <input type="color" id="color" value="#000000" />
    <input type="button" id="clear" value="Clear" />
</div>
<div>
    <canvas id="draw-canvas" height="500" width="800"></canvas>
</div>

<h1>
    Chat
</h1>
<div class="container">
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-2">User</div>
        <div class="col-4"><input type="text" id="userInput" /></div>
    </div>
    <div class="row">
        <div class="col-2">Message</div>
        <div class="col-4"><input type="text" id="messageInput" /></div>
    </div>
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-6">
            <input type="button" id="sendButton" value="Send Message" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-6">
        <ul id="messagesList"></ul>
    </div>
</div>


<script src="https://unpkg.com/@@aspnet/signalr@@1.0.0/dist/browser/signalr.js"></script>
<script>
"use strict";

var unsentStrokes = [];

var connection = new signalR.HubConnectionBuilder()
    .withUrl('/draw')
    .build();
connection.on('newStroke', drawStroke)
connection.on('clearCanvas', clearCanvas)
connection.start()
    .then(() => console.log('connected!'))
    .catch(err => console.error)

var canvas = document.getElementById('draw-canvas')
var ctx = canvas.getContext('2d')
ctx.lineWidth = 4

var clearButton = document.getElementById('clear')
clearButton.addEventListener('click', ev => {
    ev.preventDefault()
    if (confirm("Are you sure you want to clear everyone's canvases???")) {
        clearCanvas()
        connection.send('ClearCanvas')
    }
})

var colorButton = document.getElementById('color')

function clearCanvas() {
    ctx.clearRect(0, 0, canvas.width, canvas.height)
}

var penDown = false
var previous = {x: 0, y: 0, ts: 0}

canvas.addEventListener('mousedown', mouseDown)
canvas.addEventListener('touchstart', mouseDown)

canvas.addEventListener('mouseup', mouseUp)
canvas.addEventListener('touchend', mouseUp)
canvas.addEventListener('touchcancel', mouseUp)

canvas.addEventListener('mousemove', mouseMove)
canvas.addEventListener('touchmove', mouseMove)

function mouseDown() {
    penDown = true
}

function mouseUp() {
    penDown = false
}

function mouseMove(ev) {
    ev.preventDefault();
    const millisecondsSinceLastStroke = (new Date()).getTime() - previous.ts
    if (penDown && millisecondsSinceLastStroke < 100) {
        var start = {
            x: previous.x - canvas.offsetLeft,
            y: previous.y - canvas.offsetTop
        }
        var end = {
            x: ev.pageX - canvas.offsetLeft,
            y: ev.pageY - canvas.offsetTop
        }
        drawStroke(start, end, colorButton.value)
        unsentStrokes.push({
            start: start,
            end: end,
            color: colorButton.value
        })
    }
    previous = {
        x: ev.pageX,
        y: ev.pageY,
        ts: (new Date()).getTime()
    }
}

function drawStroke(start, end, color) {
    color = color || "#000"
    ctx.strokeStyle = color
    ctx.beginPath()
    ctx.moveTo(start.x, start.y)
    ctx.lineTo(end.x, end.y)
    ctx.stroke()
}

setInterval(function() {
    if (unsentStrokes.length) {
        connection.send('NewStrokes', unsentStrokes);
        unsentStrokes = [];
    }
}, 250);
</script>

<script>
    var connectionChat = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

//Disable the send button until connection is established.
document.getElementById("sendButton").disabled = true;

connectionChat.on("ReceiveMessage", function (user, message) {
    var li = document.createElement("li");
    document.getElementById("messagesList").appendChild(li);
    li.textContent = `${user} says ${message}`;
});

connectionChat.start().then(function () {
    document.getElementById("sendButton").disabled = false;
}).catch(function (err) {
    return console.error(err.toString());
});

document.getElementById("sendButton").addEventListener("click", function (event) {
    var user = document.getElementById("userInput").value;
    var message = document.getElementById("messageInput").value;
    connectionChat.invoke("SendMessage", user, message).catch(function (err) {
        return console.error(err.toString());
    });
    event.preventDefault();
});
</script>